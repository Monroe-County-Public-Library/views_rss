<?php

/**
 * @file
 * Module providing fields-based views style plugin for RSS feed generation.
 */

define('VIEWS_RSS_PATH', drupal_get_path('module', 'views_rss'));

/**
 * Implements hook_views_api().
 */
function views_rss_views_api() {
  return array(
    'api' => 3,
    'path' => VIEWS_RSS_PATH . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function views_rss_theme() {
  return array(
    'views_view_views_rss_fields' => array(
      'variables' => array('row' => NULL, 'view' => NULL),
      'file' => 'theme.inc',
      'template' => 'views-view-views-rss-fields',
      'path' => VIEWS_RSS_PATH . '/theme',
    ),
    'views_rss_element' => array(
      'variables' => array('vars' => NULL),
      'file' => 'theme.inc',
      'path' => VIEWS_RSS_PATH . '/theme',
    ),
  );
}

/**
 * Returns an array of item elements defined by other modules
 * with hook_views_rss_item_elements() and optionally altered with
 * hook_views_rss_item_elements_alter() implementations.
 */
function views_rss_get($key, $rebuild = FALSE) {
  static $data = array();
  if (!isset($data[$key]) || empty($data[$key]) || $rebuild === TRUE) {
    $cid = 'views_rss:' . $key;
    $cached = cache_get($cid, 'cache_views');
    if (is_object($cached) && isset($cached->data) && $rebuild === FALSE) {
      $data[$key] = $cached->data;
    }
    else {
      // Fetch item elements provided by other modules. We need to manually call
      // each module so that we can know which module a given item came from.
      $hook_name = 'views_rss_' . $key;
      foreach (module_implements($hook_name) as $module) {
        $module_data = call_user_func($module . '_' . $hook_name);
        if (isset($module_data) && is_array($module_data)) {
          $data[$key][$module] = $module_data;
        }
      }
      // Add namespaces not defined by any hook_views_rss_namespaces(),
      // but used in any of defined <channel> or <item> elements.
      // Let's also add "xmlns" prefix by default to such namespaces.
      if ($key == 'namespaces') {
        $data[$key] = _views_rss_get_undefined_namespaces($data[$key]);
      }
      // Allow other modules to alter obtained item elements.
      drupal_alter($hook_name, $data[$key]);
      // Store it infinitely in cache (rebuild only on cache clear).
      cache_set($cid, $data[$key], 'cache_views');
    }
  }
  return $data[$key];
}

/**
 * Add namespaces not defined by any hook_views_rss_namespaces(),
 * but used in any of defined <channel> or <item> elements.
 * Let's also add "xmlns" prefix by default to such namespaces.
 */
function _views_rss_get_undefined_namespaces($namespaces) {
  foreach (views_rss_get('channel_elements') as $module => $elements) {
    foreach (array_keys($elements) as $element) {
      list($namespace, $element_name) = views_rss_extract_element_names($element);
      if ($namespace && !isset($namespaces[$module][$namespace])) {
        $namespaces[$module][$namespace] = array('prefix' => 'xmlns', 'uri' => NULL);
      }
    }
  }
  foreach (views_rss_get('item_elements') as $module => $elements) {
    foreach (array_keys($elements) as $element) {
      list($namespace, $element_name) = views_rss_extract_element_names($element);
      if ($namespace && !isset($namespaces[$module][$namespace])) {
        $namespaces[$module][$namespace] = array('prefix' => 'xmlns', 'uri' => NULL);
      }
    }
  }
  return $namespaces;
}

/**
 * Extracts and returns an array containing element namespace and name.
 */
function views_rss_extract_element_names($element, $core_namespace = '') {
  if (!strstr($element, ':')) {
    $element = $core_namespace . ':' . $element;
  }
  return explode(':', $element);
}